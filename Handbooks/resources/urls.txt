Кнопки по центру
https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_center-flex_btn
https://www.w3schools.com/howto/howto_css_center_button.asp
Закрытие по escape
https://www.freakyjolly.com/how-to-hide-or-close-div-using-escape-key-javascript-jquery-angularjs/

How TO - Collapse Sidebar
https://www.w3schools.com/howto/howto_js_collapse_sidebar.asp
https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_collapse_sidebar

CSS Selector Reference
https://www.w3schools.com/cssref/css_selectors.asp

Импорт модуля
https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/import
Этот код вставляет объект myModule в текущую область видимости, содержащую все экспортированные значения из модуля, находящегося в файле /modules/my-module.js.

import * as myModule from '/modules/my-module.js';

В данном случае, доступ к импортируемым значениям можно осуществить с использованием имени модуля 
(в данном случае "myModule") в качестве пространства имён. 
Например, если импортируемый выше модуль включает в себя экспорт метода doAllTheAmazingThings(), вы можете вызвать его так:

myModule.doAllTheAmazingThings();

////////////

https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser/30800715#30800715
This would be a pure JS version (adapted from cowboy's):

var obj = {a: 123, b: "4 5 6"};
var data = "text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(obj));

var a = document.createElement('a');
a.href = 'data:' + data;
a.download = 'data.json';
a.innerHTML = 'download JSON';

var container = document.getElementById('container');
container.appendChild(a);
http://jsfiddle.net/sz76c083/1

Module scope
https://stackoverflow.com/questions/44590393/es6-modules-undefined-onclick-function-after-import

Template
https://developer.mozilla.org/ru/docs/Web/HTML/Element/template


const vs let - https://teamtreehouse.com/community/javascript-and-the-dom-selecting-by-id-let-vs-const

const a = 3
a + 1;  //not allowed

const b = {
   name: "Michael"
}

b.name = "Mike"  // allowed
but

const c = {
   name:"Mitch"
}

//not allowed, since I'm not simply accessing the existing value and updating it, but rather creating a new object literal.
c = {
  name: "Mick"
}

Get last item in an array
https://stackoverflow.com/questions/3216013/get-the-last-item-in-an-array
if (locArray.at(-1) === 'index.html') {
	// do something
} else {
	// something else
}



slice
Метод slice() не изменяет исходный массив, а возвращает новую «одноуровневую» копию, содержащую копии элементов, вырезанных из исходного массива. Элементы исходного массива копируются в новый массив по следующим правилам:

Ссылки на объекты (но не фактические объекты): метод slice() копирует ссылки на объекты в новый массив. И оригинал, и новый массив ссылаются на один и тот же объект. То есть, если объект по ссылке будет изменён, изменения будут видны и в новом, и в исходном массивах.
Строки и числа (но не объекты String и Number): метод slice() копирует значения строк и чисел в новый массив. Изменения строки или числа в одном массиве никак не затрагивает другой.
Если к любому массиву будет добавлен новый элемент, это никак не повлияет на другой массив.

https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
Метод splice() изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые.

https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/map
Метод map() создаёт новый массив с результатом вызова указанной функции для каждого элемента массива.


//let dataJSON = new Object() - wrong
//let dataJSON = {} - correct

Деструктуризация
https://learn.javascript.ru/destructuring-assignment


to do 

queryselect 
bootstrap


REDUCE EXAMPLE!
,
			newrow 		= template.content.cloneNode(true),
			testReduce 	= data.reduce((prev, curr) => prev + `	<tr>
																	<td>${ curr.id }</td>
																	<td>${ curr.title }</td>
																	<td>${ curr.time }</td>
																	<td>${ curr.active }</td>
																</tr>`,
		'')


      


const renderDataToTable = () => {
   let dataJSON = new Object()
   dataJSON.data = genData(1010)
   const tblData = dataJSON.data
   if('content' in document.createElement('template')) {
      const tbody = document.querySelector('tbody')
     const template = document.querySelector('#recordrow')
 
     for(let i = 0; i < tblData.length; i++) {
       const newrow = template.content.cloneNode(true)
       const td = newrow.querySelectorAll('td')
       td[0].textContent = tblData[i].id
       td[1].textContent = tblData[i].title
       td[2].textContent = tblData[i].time
       td[3].textContent = tblData[i].active
 
       tbody.appendChild(newrow)
     }
     } else {
         alert('Broser not supports template')
     }
 }
 


 // const renderData = () => {
   //   const tblCont = document.getElementById('tblArea')
   //   let tblData = RESPONSE.data
   //     //Create table
   //   const tbl = document.createElement('table')
   //   const tblHeaderRow = document.createElement('tr')
   //   const idHeader = document.createElement('th')
   //   idHeader.appendChild(document.createTextNode('id'))
   //   const titleHeader = document.createElement('th')
   //   titleHeader.appendChild(document.createTextNode('title'))
   //   const timeHeader = document.createElement('th')
   //   timeHeader.appendChild(document.createTextNode('time'))
   //   const activeHeader = document.createElement('th')
   //   activeHeader.appendChild(document.createTextNode('active'))
   
   //   tblHeaderRow.appendChild(idHeader)
   //   tblHeaderRow.appendChild(titleHeader)
   //   tblHeaderRow.appendChild(timeHeader)
   //   tblHeaderRow.appendChild(activeHeader)
   //   tbl.appendChild(tblHeaderRow)
     
   //   for(let i = 0; i < tblData.length; i++) {
   //     let tblRow = document.createElement('tr')  
   
   //     let idData = tblData[i].id
   //     let titleData = tblData[i].title
   //     let timeData = tblData[i].time
   //     let activeData = tblData[i].active
           
   //     const idCell = document.createElement('td')
   //     const titleCell = document.createElement('td')
   //     const timeCell  = document.createElement('td')
   //     const activeCell = document.createElement('td')
   
   //     idCell.appendChild(document.createTextNode(idData))
   //     titleCell.appendChild(document.createTextNode(titleData))
   //     timeCell.appendChild(document.createTextNode(timeData))
   //     activeCell.appendChild(document.createTextNode(activeData))
   
   //     tblRow.appendChild(idCell)
   //     tblRow.appendChild(titleCell)
   //     tblRow.appendChild(timeCell)
   //     tblRow.appendChild(activeCell)
   
   //     tbl.appendChild(tblRow)
   //   }
   //   tblCont.appendChild(tbl)
   // }
   // const ff = () => {
   //   let a = getData()
   // }

   
const RESP = {
   a: function(){
     alert()
   },
   b: () => {
 
   },
   c() { 
     this === RESP
     this.a
 
   }
 }

 
// readJSONFromFile(function(text){
   //   let data = JSON.parse(text);
   //   document.getElementById("jsonShow").innerHTML = JSON.stringify(data, undefined, 2);
   // })
   
   //Back quotes
   //const template = document.createElement('template')
   //const newrow = template.content.cloneNode(true)
   
   
   // const table = `<table>
   //   <thead>
   // 		<tr>
   // 				<td>id</td>
   // 				<td>title</td>
   // 				<td>time</td>
   // 				<td>active</td>
   // 		</tr>
   // </thead>
   // <tbody>
   // 		${}  // reduce map
   // </tbody>
   // </table>`
   
   // template.innerHTML = table
   // container.append(template.content.cloneNode(true))
   
   
   
   
   // function readJSONFromFile(callback){
   //     let xobj = new XMLHttpRequest()
   //     xobj.overrideMimeType('application/json')
   //     xobj.open('GET','data.json',true)
   //     xobj.onreadystatechange = function () {
   //         if (xobj.readyState == 4 && xobj.status == '200') {
   
   //             // .open will NOT return a value but simply returns undefined in async mode so use a callback
   // //             callback(xobj.responseText)
   // //         }
   // //     }
   // //     xobj.send(null)
   // // }
   
   
   // // function getData(){
   // //     loadJSON(function(response) {
   // //         // Do Something with the response e.g.
   // //         let jsonresponse = JSON.parse(response)
           
   // //         // Assuming json data is wrapped in square brackets as Drew suggests
   // //         console.log(jsonresponse[0].name)
           
   // //         }
   // //     )
   // // }
   
   // function genereateObjects(){
   //     let arr = new Array()
   //     let b = i % 2 === 0 ? true : false
   
   //     for(i = 0 i <=1000 i++){
   //         let data = {
   //             id = i,
   //             title = 'Titel' + i,
   //             time = new Date,
   //             active =b
   //         }
   //         arr[i] = data
   //     }
   //     return arr
   // }
   
   // function generateJson(){
   //     let arr = genereateObjects()
   //     let jsonString = JSON.stringify(arr)
   // }
   
   // let data = {
   //     id = 0,
   //     title = 'Title3',
   //     time = new Date().toUTCString,
   //     active = true
   // }


Сравнение объектов
Сравнение объектов
Сравним два объекта с помощью стандартных операций сравнения и эквивалентности:

1
2
3
4
const tom = { name: "Tom"};
const bob = { name: "Bob"};
console.log(tom == bob);    // false
console.log(tom === bob);   // false
Оба оператора в данном случае возвратят значение false, то есть объекты не равны. Причем даже если значения свойств объектов будет одинаковым, то мы все равно в обоих случаях получим false

1
2
3
4
const tom = { name: "Tom"};
const bob = { name: "Tom"};
console.log(tom == bob);    // false
console.log(tom === bob);   // false
Однако, что будет, если обе константы (переменных) хранят ссылку на один и тот же объект:

1
2
3
4
const tom = { name: "Tom"};
const bob = tom;
console.log(tom == bob);    // true
console.log(tom === bob);   // true
В этом случае в обоих случаях мы получим true, поскольку значения обоих констант равны, так как по сути это одно и то же значение.



<div id="mw" class="modal fade" role="dialog">          
  <div class="modalCnt">
     <div class="CloseModalBtn">
         <span id="sCloseModalBtn" class="closeModal">X</span>
         <span id="modalTitle" class="closeModal">Modal</span> 
     </div>
     <p>&nbsp</p>
     <div class="btn_div">
         <button id="btnGetData" class="btnM">Get Data</button>
     </div>
     <div class="btn_div">
         <button id="btnRenderData" class="btnM">Render Data</button>
     </div>
     <div class="btn_div">
         <button id="btnSendUpdate" class="btnM">Send Update</button>
     </div>                
     <div class="btn_div">
         <button id="btnDoSomeSteps" class="btnM">Do Some Steps</button>
     </div>
     <div class="btn_div" id="hrefcontainer">
         <button id="btnGenHref" class="btnM">Generate JSON</button>
     </div>
     <div class="btn_div" id="secondRowContainer">
         <pre id="secrowjsonShow"></pre>
     </div>
  </div>
  
</div>